"use strict";var token=JSON.parse(localStorage.getItem("token")),headers={Authorization:"Bearer ".concat(token)};function loadPost(){var t,n,o;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,t=new URLSearchParams(window.location.search),n=Object.fromEntries(t.entries()),o=n.postID,e.next=6,regeneratorRuntime.awrap(axios.get("/posts/getPostToView?postID=".concat(o),{headers:headers}));case 6:renderToViewPost(e.sent.data),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(0),console.error(e.t0);case 13:case"end":return e.stop()}},null,null,[[0,10]])}function renderToViewPost(t){var n,o,s,a,r,c,i,l;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,n="",e.next=4,regeneratorRuntime.awrap(axios.get("comments/personalCommentCheck",{headers:headers}));case 4:return o=e.sent,t.comments.forEach(function(t){return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:o.data===t.username?n+='<div class="comment">\n                    <div class="comment__username">'.concat(t.username,'</div>\n                    <div class="comment__comment">').concat(t.comment,'</div>\n                    <button class="like-button" onclick="likeComment(\'').concat(t.commentID,"')\">Like ").concat(t.likes,'</button>\n                    <button class="delete-button" onclick="deleteComment(\'').concat(t.commentID,"')\">Delete</button> \n                </div>\n                "):n+='<div class="comment">\n                <div class="comment__username">'.concat(t.username,'</div>\n                <div class="comment__comment">').concat(t.comment,'</div>\n                <button class="like-button" onclick="likeComment(\'').concat(t.commentID,"')\">Like ").concat(t.likes,'</button>\n                <button class="report-button" onclick="reportComment(\'').concat(t.commentID,"')\">Report</button> \n            </div>\n            ");case 1:case"end":return e.stop()}})}),e.next=8,regeneratorRuntime.awrap(axios.post("/posts/postLikesAndDislikes",{postID:t.postID},{headers:headers}));case 8:return s=e.sent,a=s.data,r=a.like,c=a.dislike,e.next=12,regeneratorRuntime.awrap(axios.get("posts/personalPostCheck",{headers:headers}));case 12:i=e.sent,!(l="")===t.edited&&(t.title="".concat(t.title," (edited)")),l=i.data===t.poster?"<h2>".concat(t.title,'</h2>\n            <h3><span class="italic">Posted By:</span> ').concat(t.poster,' <span class="italic">On:</span> ').concat(t.date,' <br><span class="italic">Tags:</span> ').concat(t.tags,' <br><span class="italic">Views:</span> ').concat(t.views,"</h3>\n            <div>").concat(t.post,'</div>\n            <div class="post--buttons">\n            <button class="like-button" onclick="likePost(\'').concat(t.postID,"')\">").concat(r," ").concat(t.likes,'</button> \n            <button class="dislike-button" onclick="dislikePost(\'').concat(t.postID,"')\">").concat(c," ").concat(t.dislikes,'</button>\n            </div>\n            <div class="comments-header">Comments:</div>\n            <div class="commentholder">').concat(n,'</div>\n            <form onsubmit="postComment(event)">\n            <textarea type="text" name="comment" placeholder="comment" required></textarea><br>\n            <button type="submit">Comment!</button>\n            </form>'):"<h2>".concat(t.title,'</h2>\n            <h3><span class="italic">Posted By:</span> ').concat(t.poster,' <span class="italic">On:</span> ').concat(t.date,' <br><span class="italic">Tags:</span> ').concat(t.tags,' <br><span class="italic">Views:</span> ').concat(t.views,"</h3>\n            <div>").concat(t.post,'</div>\n            <div class="post--buttons">\n            <button class="like-button" onclick="likePost(\'').concat(t.postID,"')\">").concat(r," ").concat(t.likes,'</button> \n            <button class="dislike-button" onclick="dislikePost(\'').concat(t.postID,"')\">").concat(c," ").concat(t.dislikes,'</button>\n            <button class="report-button" onclick="reportPost(\'').concat(t.postID,'\')">Report</button>\n            </div>\n            <div class="comments-header">Comments:</div>\n            <div class="commentholder">').concat(n,'</div>\n            <form onsubmit="postComment(event)">\n            <textarea type="text" name="comment" placeholder="comment" required></textarea><br>\n            <button type="submit">Comment!</button>\n            </form>'),document.querySelector(".postholder").innerHTML=l,e.next=22;break;case 19:e.prev=19,e.t0=e.catch(0),console.error(e.t0);case 22:case"end":return e.stop()}},null,null,[[0,19]])}function likePost(t){return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,regeneratorRuntime.awrap(axios.post("/posts/likePost",{postID:t},{headers:headers}));case 3:renderToViewPost(e.sent.data),e.next=10;break;case 7:e.prev=7,e.t0=e.catch(0),console.error(e.t0);case 10:case"end":return e.stop()}},null,null,[[0,7]])}function dislikePost(t){return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,regeneratorRuntime.awrap(axios.post("/posts/dislikePost",{postID:t},{headers:headers}));case 3:renderToViewPost(e.sent.data),e.next=10;break;case 7:e.prev=7,e.t0=e.catch(0),console.error(e.t0);case 10:case"end":return e.stop()}},null,null,[[0,7]])}function reportPost(o){return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:try{swal({title:"Are you sure?",text:"Report Post!",icon:"warning",buttons:!0,dangerMode:!0}).then(function(t){var n;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:if(t)return e.next=3,regeneratorRuntime.awrap(axios.post("/posts/reportPost",{postID:o},{headers:headers}));e.next=7;break;case 3:"removed"===(n=e.sent).data?swal({title:"Post Deleted!",text:"Post has been reported too many times and has been removed.",icon:"info",button:"back to posts"}).then(function(){window.location.href="publicposts.html"}):"you have already reported this post"===n.data?swal({title:"Already Reported!",text:"".concat(n.data),icon:"info",button:"back to post"}):(swal({title:"Reported Succesfully!",icon:"success",button:"back to post"}),renderToViewPost(n.data)),e.next=8;break;case 7:swal("Post not reported");case 8:case"end":return e.stop()}})})}catch(e){console.error(e)}case 1:case"end":return e.stop()}})}var urlSearchParams=new URLSearchParams(window.location.search),params=Object.fromEntries(urlSearchParams.entries()),postID=params.postID;function postComment(t){var n,o;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,t.preventDefault(),n=t.target.children.comment.value,e.next=5,regeneratorRuntime.awrap(axios.post("/comments/postComment",{postID:postID,comment:n},{headers:headers}));case 5:o=e.sent,t.target.reset(),o.data?(swal({title:"Comment Committed!",icon:"success",button:"back to post"}),renderToViewPost(o.data)):swal({title:"Oops, something went wronng!",icon:"error",button:"try again"}),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(0),console.error(e.t0);case 13:case"end":return e.stop()}},null,null,[[0,10]])}function likeComment(t){return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,regeneratorRuntime.awrap(axios.post("/comments/likeComment",{postID:postID,commentID:t},{headers:headers}));case 3:renderToViewPost(e.sent.data),e.next=10;break;case 7:e.prev=7,e.t0=e.catch(0),console.error(e.t0);case 10:case"end":return e.stop()}},null,null,[[0,7]])}function reportComment(o){return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:try{swal({title:"Are you sure?",text:"Report Post!",icon:"warning",buttons:!0,dangerMode:!0}).then(function(t){var n;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:if(t)return e.next=3,regeneratorRuntime.awrap(axios.post("/comments/reportComment",{postID:postID,commentID:o},{headers:headers}));e.next=8;break;case 3:"removed"===(n=e.sent).data?swal({title:"Comment Deleted!",text:"Comment has been reported too many times and has been removed.",icon:"info",button:"back to posts"}).then(function(){window.location.href="publicposts.html"}):"you have already reported this comment"===n.data?swal({title:"Already Reported!",text:"".concat(n.data),icon:"info",button:"back to post"}):swal({title:"Reported Succesfully!",icon:"success",button:"back to post"}),renderToViewPost(n.data),e.next=9;break;case 8:swal("Comment not reported");case 9:case"end":return e.stop()}})})}catch(e){console.error(e)}case 1:case"end":return e.stop()}})}function deleteComment(n){var t,o,s;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:try{t=new URLSearchParams(window.location.search),o=Object.fromEntries(t.entries()),s=o.postID,swal({title:"Are you sure?",text:"Comment will be deleted permenatley!",icon:"warning",buttons:!0,dangerMode:!0}).then(function(t){return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:if(t)return e.next=3,regeneratorRuntime.awrap(axios.delete("/comments/deleteComment/".concat(n,"&").concat(s),{headers:headers}));e.next=8;break;case 3:renderToViewPost(e.sent.data),swal("Poof! Your comment has been deleted!",{icon:"success"}),e.next=9;break;case 8:swal("Your comment is safe!");case 9:case"end":return e.stop()}})})}catch(e){console.error(e)}case 1:case"end":return e.stop()}})}window.addEventListener("load",loadPost);